from abc import ABC, abstractmethod
# =============================================
# 1. Абстрактный базовый класс Handler
# =============================================
class Handler(ABC):
    @abstractmethod
    def handle(self) -> str:
        """Абстрактный метод, который должны реализовать все конкретные обработчики.
        Это гарантирует единый интерфейс для всех обработчиков запросов."""
        pass

# =============================================
# 2. Конкретные обработчики (страницы)
# =============================================
class HomeHandler(Handler):
    def handle(self) -> str:
        """Обработчик главной страницы. Реализует конкретную логику для '/'"""
        return "Добро пожаловать на главную страницу!"

class AboutHandler(Handler):
    def handle(self) -> str:
        """Обработчик страницы 'О нас'. Реализует логику для '/about'"""
        return "О нас: Мы лучшая компания!"

class ContactHandler(Handler):
    def handle(self) -> str:
        """Обработчик страницы контактов. Реализует логику для '/contact'"""
        return "Контакты: support@example.com"

# =============================================
# 3. Фронт-контроллер (ядро паттерна)
# =============================================
class FrontController:
    def __init__(self):
        """Инициализация:
        - Создает словарь для хранения соответствий  -> обработчик
        - Каждый обработчик создается заранее"""
        self._handlers = {
            "/": HomeHandler(),
            "/about": AboutHandler(),
            "/contact": ContactHandler(),
        }
    def handle_request(self, path: str) -> str:
        """Основной метод обработки запроса:
        1. Принимает путь
        2. Выполняет общую логику (логирование)
        3. Находит нужный обработчик
        4. Делегирует выполнение конкретному обработчику"""
        # Общая для всех запросов логика (логирование)
        print(f"[FrontController] Логирование: запрос к {path}")
        # Поиск обработчика в словаре
        handler = self._handlers.get(path)
        if not handler:
            # Если обработчик не найден - возвращаем 404
            return "404 Страница не найдена"

        # Делегируем выполнение конкретному обработчику
        return handler.handle()
# =============================================
# 4. Клиентский код (имитация работы)
# =============================================
if __name__ == "__main__":
    # Создаем фронт-контроллер (единственный для приложения)
    front_controller = FrontController()
    # Имитируем HTTP-запросы
    print(front_controller.handle_request("/"))  # Главная
    print(front_controller.handle_request("/about"))  # О нас
    print(front_controller.handle_request("/contact"))  # Контакты
